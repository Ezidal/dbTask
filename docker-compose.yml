services:
  master:
    image: postgres
    container_name: master
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      #POSTGRES_HOST_AUTH_METHOD: "trust\nhost replication all ${SUBNET1} trust"
    volumes:
       - master:/var/lib/postgresql/data/
       - ./main.sql:/docker-entrypoint-initdb.d/0main.sql
       - ./rules_for_view.sql:/docker-entrypoint-initdb.d/rules_for_view.sql
    networks:
      - net

  shard1:
    image: postgres
    container_name: shard1
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_SHARD_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SHARD_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
       - shard1:/var/lib/postgresql/data/
       - ./templates/shard_1_create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      # - ./templates/fst.sql:/docker-entrypoint-initdb.d/fst.sql
    depends_on:
      - master
    networks:
      - net
  
  shard2:
    image: postgres
    container_name: shard2
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_SHARD_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SHARD_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
       - shard2:/var/lib/postgresql/data/
       - ./templates/shard_2_create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      # - ./templates/scd.sql:/docker-entrypoint-initdb.d/scd.sql
    depends_on:
      - master    
    networks:
      - net

    
  
  slave1:
    image: postgres
    container_name: slave1
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_SLAVE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SLAVE_PASSWORD}
    depends_on:
      - master
    networks:
      - net

  slave2:
    image: postgres
    container_name: slave2
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_SLAVE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SLAVE_PASSWORD}
    depends_on:
      - master
    networks:
      - net


  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - master
    networks:
      - net

volumes:
  master:
  shard1:
  shard2:

networks:
  net:
    external: true